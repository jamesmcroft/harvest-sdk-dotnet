namespace Harvest;

using System;
using System.Threading.Tasks;
using Authentication;

public partial class HarvestServiceClient
{
    private readonly AuthCredential authCredential;

    /// <summary>
    /// Builds the authorization URL for the Harvest API that can be used to authenticate the client.
    /// </summary>
    /// <returns>A <see cref="Uri"/> that can be used to authenticate the client.</returns>
    public Uri BuildAuthorizationUrl()
    {
        if (this.authCredential is not OAuthCredential oauthCredential)
        {
            throw new InvalidOperationException("Cannot build authorization URL without OAuth credentials");
        }

        return oauthCredential.BuildAuthorizationUrl();
    }

    /// <summary>
    /// Finalizes the authorization process initiated by the <see cref="BuildAuthorizationUrl"/> value by exchanging the authorization code for an access token.
    /// </summary>
    /// <param name="callbackUri">The callback URL that was used to redirect the user back to the application.</param>
    /// <param name="state">The state that was provided when the authorization URL was generated. Defaults to the state generated by calling <see cref="BuildAuthorizationUrl"/> if not provided.</param>
    /// <returns>A <see cref="Task"/> that represents the asynchronous operation.</returns>
    /// <exception cref="InvalidOperationException">Thrown when there is an error during the authorization process.</exception>
    public async Task AuthorizeAsync(Uri callbackUri, string state = null)
    {
        if (this.authCredential is not OAuthCredential oauthCredential)
        {
            throw new InvalidOperationException("Cannot authorize without OAuth credentials");
        }

        await oauthCredential.AuthorizeAsync(callbackUri, state);
    }
}